@page "/"
@using Microsoft.EntityFrameworkCore
@using Shared
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject Use _user
  <!-- Navigation -->
  <nav class="navbar navbar-light bg-light static-top">
    <div class="container">
      <a class="navbar-brand" href="#">MovieDB</a>
      <a class="btn btn-primary" @onclick=@NavigateToSignUp>Sign Up</a>
    </div>
  </nav>

  <!-- Masthead -->
  <header class="masthead text-white text-center">
    <div class="overlay"></div>
    <div class="container">
      <div class="row">
        <div class="col-xl-9 mx-auto">
          <h1 class="mb-5">Find Movies and all about them!</h1>
        </div>
        <div class="col-md-10 col-lg-8 col-xl-7 mx-auto">
          <form>
            <div class="form-row">
              <div class="col-12 col-md-9 mb-2 mb-md-0">
                  <EditForm Model="_search" OnValidSubmit="FindMovie">
                    <DataAnnotationsValidator />
                    <ValidationSummary />                
                        <InputText @bind-Value="_search.MovieName" class="search_input"/> 
                <button type="submit"><span class="oi oi-magnifying-glass"></span>Search<i class="fas fa-search"></i></button>
              </EditForm>
              </div>
              <div class="col-12 col-md-3">
              
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </header>


  <!-- Movie List -->
    <div style="height: 400px;overflow: auto">
        <div class="list-group">
          @if (this.AllMoviesTitles != null)
          {
            @if(!SearchButton)
            {
              @foreach (var title in AllMoviesTitles)
              {
                  @if(!_user.comments.ContainsKey(title))
                    _user.comments.Add(title,new List<string>());
                  <button type="button" class="list-group-item list-group-item-action" @onclick="@(() => NavigateToMovie(title))">@title</button>
                  
              }
            }
            @if(SearchButton)
            {
              @foreach (var title in SearchedMoviesTitles)
                {
                  <button type="button" class="list-group-item list-group-item-action" @onclick="@(() => NavigateToMovie(title))">@title</button>
                }
            }
          }
          </div>
    </div>

<!-- Icons Grid -->
  <section class="features-icons bg-light text-center">
    <IconsGrid></IconsGrid>
  </section>
  
@code
{
    public string SearchKey {get;set;}
    public Search _search;
    public List<string> AllMoviesTitles{get;set;}
    public List<string> SearchedMoviesTitles{get;set;}  
    public bool SearchButton=false;  
    protected override async Task OnInitializedAsync()
    {
      _search=new Search();
      AllMoviesTitles=new List<string>();
      SearchedMoviesTitles=new List<string>();  
      await AllMovies();  
    }
    void NavigateToSignUp()
    {
      _user.FromMovie=false;
      UriHelper.NavigateTo("signup");
    }
    void NavigateToMovie(string title)
    {
      UriHelper.NavigateTo($"movie/{title}");
    }
    public async Task AllMovies()
    {
        HttpResponseMessage response = null;
        try
        {
            var uri = @"http://localhost:6001/api/movie/allmovies";
            HttpRequestMessage httpRequest = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri(uri),
            };
            response = await Http.SendAsync(httpRequest);
        } 
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        AllMoviesTitles = response.Content.ReadAsStringAsync().Result
                            .Trim('[', ']')
                            .Split(',')
                            .Select(e => e.Trim('"'))
                            .ToList();
    }

    public void FindMovie()
    {
      SearchButton=true;
      SearchedMoviesTitles=AllMoviesTitles
                              .Where(t=>t.ToLower().Contains(_search.MovieName.ToLower())).ToList();
    }
}
